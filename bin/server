<?php

declare(strict_types=1);

use App\Bootstrap;
use App\Http\Application;
use Nette\Application\BadRequestException;
use Nette\Application\IPresenterFactory;
use Nette\Application\UI\Presenter;
use Nette\DI\Container;
use Nette\Http\Request as HttpRequest;
use Nette\Application\Request as ApplicationRequest;
use Nette\Http\UrlScript;
use Nette\InvalidStateException;
use Nette\Routing\Router;
use Swoole\Http\Request;
use Swoole\Http\Response;
use Swoole\Http\Server;
use Swoole\Runtime;
use Tracy\Bar;

require __DIR__ . '/../src/Bootstrap.php';

final class AppServer
{

	/**
	 * @var Server
	 */
	private $server;

	/**
	 * @var Container|null
	 */
	private $container;


	public function __construct()
	{
		$this->server = new Server('127.0.0.1', 3000, SWOOLE_BASE);

		$this->server->set([
			'log_level' => 2,
			'worker_num' => 4,
		]);

		$this->bindWorkerEvents();
		$this->bindHttpEvents();
	}


	public function start(): void
	{
		$this->server->start();
	}


	private function bindWorkerEvents(): void
	{
		$this->server->on('workerStart', function(Server $server): void {
			$bootstrap = new Bootstrap;
			$this->container = $bootstrap->createContainer();
		});
	}


	private function bindHttpEvents(): void
	{
		$this->server->on('Request', function (Request $request, Response $response) {
			$router = $this->getContainer()->getByType(Router::class);

			var_dump($request->server);

			$httpRequest = new HttpRequest(
				new UrlScript(
					$this->server->host . $request->server['path_info'], $request->server['path_info']
				),
				$request->post,
				$request->files,
				$request->cookie,
				$request->header,
				$request->server['request_method'],
				$request->server['remote_addr'],
				null,
				function() use ($request): string {
					return $request->rawContent();
				}
			);

			$params = $router->match($httpRequest);
			$presenter = $params[Presenter::PRESENTER_KEY] ?? null;

			if ($params === null) {
				throw new BadRequestException('No route for HTTP request.');
			} elseif (!is_string($presenter)) {
				throw new InvalidStateException('Missing presenter in route definition.');
			}

			unset($params[Presenter::PRESENTER_KEY]);

			$appRequest = new ApplicationRequest(
				$presenter,
				$httpRequest->getMethod(),
				$params,
				$httpRequest->getPost(),
				$httpRequest->getFiles(),
				[ApplicationRequest::SECURED => $httpRequest->isSecured()]
			);

			$presenterFactory = $this->getContainer()->getByType(IPresenterFactory::class);

			$appResponse = (new Application($presenterFactory))->processRequest($appRequest);

			/*$response->header = [
				'content-type' => 'application/json',
			];*/

			$response->end((string) $appResponse->getSource());
		});
	}


	private function getContainer(): Container
	{
		if ($this->container === null) {
			throw new \RuntimeException('DI Container not created yet');
		}

		return $this->container;
	}
}

Runtime::enableCoroutine(true);
(new AppServer)->start();
